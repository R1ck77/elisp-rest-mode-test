
(defun rest-utils--force-read-only ()
  (setq buffer-read-only t))

(defun rest-utils--propertize-text (string property value)
  (put-text-property 0 (length string) property value string)
  string)

(defun rest-utils--bold (string)
  (put-text-property 0 (length string) 'font-lock-face 'bold string)
  string)

(defun rest-utils--colorize (string color)
  (put-text-property 0 (length string) 'font-lock-face (list ':foreground color) string)
  string)


(defun rest-utils--yellow (string)
  (rest-utils--colorize string "yellow"))

(defun rest-utils--grey (string)
  (rest-utils--colorize string "gray"))

(defun rest-utils--wipe-buffer-if-present (name)
  (let ((old-buffer (get-buffer name)))
    (when old-buffer
      (kill-buffer old-buffer))))

(defun rest-utils--context-buffer-bottom (name)
  (rest-utils--wipe-buffer-if-present name)
    (let ((buffer (get-buffer-create name)))    
      (display-buffer-in-side-window buffer nil)
      buffer))

(defun rest-utils--close-buffer ()
  (interactive)
  (let ((kill-buffer-query-functions nil))
    (kill-buffer)))


(defconst rest-utils--expandable-property 'rest-utils--expadable)
(defconst rest-utils--collapsible-property 'rest-utils--collapsible)

(defun rest-utils-insert-expandable-text (content text-provider)
  "Insert a toggleable header (the newline is added automatically).

The inserted text can be toggled with the rest-utils--toggle-text
function: the expansion will be generated by the text-provider function.

The text provided shouldn't be terminated with a newline, unless an extra 
one is desired"
  (insert
   (rest-utils--propertize-text content
                                rest-utils--expandable-property
                                text-provider)))

(defun rest-utils--jump-to-header ()
  "Move up until a header is hit"
  (while (and (rest-utils--on-expanded-text?)
              (not (= -1 (forward-line -1))))))

(defun rest-utils--get-expanded-text ()
  (funcall
   (get-text-property (point)
                      rest-utils--expandable-property)))

(defun rest-utils--expand-text ()
  "Expand the text in the header"
  (let ((text (rest-utils--get-expanded-text)))
    (save-excursion
      (goto-char (line-end-position))
      ;;; TODO/FIXME this is bogus: wrong properties!
      (insert (concat "\n" text )))))

(defun rest-utils--collapse-text ()
  "Collapse the text at point"
  (save-excursion
    (while (and (not (= (forward-line) 1))
                (rest-utils--on-expanded-text?))
      (kill-line))))

(defun rest-utils--on-expandable-text? ()
  (get-text-property (point)
                     rest-utils--expandable-property))

(defun rest-utils--on-expanded-text? ()
  (get-text-property (point)
                     rest-utils--collapsible-property))

(defun rest-utils--next-line-expanded? ()
  (save-excursion
    (and (not (= (forward-line) 1))
         (rest-utils--on-expanded-text?))))

(defun rest-utils--on-header-of-expanded-text? ()
  (and (rest-utils--on-expandable-text?)
         (rest-utils-next-line-expanded?)))

(defun rest-utils-toggle-text ()
  (interactive)
  (cond
   ((rest-utils--on-header-of-expanded-text?)
    (rest-utils--collapse-text))
   ((rest-utils--on-expandable-text?)
    (rest-utils--expand-text))
   ((rest-utils--on-expanded-text?)
    (rest-utils--jump-to-header)
    (rest-utils--collapse-text))))

(provide 'rest-utils)
